### Rozwiązania dla zadań:

---

### **2. Przesyłanie danych między ekranami**
#### **Kroki do wykonania:**
1. W Android Studio utwórz projekt z **Empty View Activity**.
2. Na pierwszym ekranie dodaj:
   - EditText (do wprowadzania imienia).
   - Button z napisem "Dalej".
3. Na drugim ekranie dodaj TextView do wyświetlania powitania.
4. Użyj **Intent** do przekazania imienia z pierwszego ekranu na drugi.

#### **Kod:**
##### Pierwszy ekran (MainActivity):
```java
Intent intent = new Intent(MainActivity.this, SecondActivity.class);
intent.putExtra("userName", userNameEditText.getText().toString());
startActivity(intent);
```

##### Drugi ekran (SecondActivity):
```java
String userName = getIntent().getStringExtra("userName");
welcomeTextView.setText("Witaj, " + userName + "!");
```

---

### **3. Tworzenie prostego kalkulatora**
#### **Kroki do wykonania:**
1. W Android Studio utwórz projekt z **Empty Activity**.
2. Na pierwszym ekranie dodaj:
   - Dwa EditTexty (na liczby).
   - Cztery przyciski do operacji matematycznych.
3. Przekaż dane i operację na drugi ekran za pomocą **Intent**.
4. Na drugim ekranie oblicz wynik i wyświetl go.

#### **Kod:**
##### Pierwszy ekran (MainActivity):
```java
Intent intent = new Intent(MainActivity.this, ResultActivity.class);
intent.putExtra("num1", Integer.parseInt(editText1.getText().toString()));
intent.putExtra("num2", Integer.parseInt(editText2.getText().toString()));
intent.putExtra("operation", "add"); // Można zmienić na "subtract", "multiply", "divide"
startActivity(intent);
```

##### Drugi ekran (ResultActivity):
```java
int num1 = getIntent().getIntExtra("num1", 0);
int num2 = getIntent().getIntExtra("num2", 0);
String operation = getIntent().getStringExtra("operation");

int result = 0;
switch (operation) {
    case "add": result = num1 + num2; break;
    case "subtract": result = num1 - num2; break;
    case "multiply": result = num1 * num2; break;
    case "divide": 
        result = num2 != 0 ? num1 / num2 : 0; 
        break;
}

resultTextView.setText("Wynik: " + result);
```

---

### **4. Tworzenie aplikacji notatnika**
#### **Kroki do wykonania:**
1. Użyj **RecyclerView** do listy notatek.
2. Zapewnij funkcjonalność zapisu danych w lokalnej pamięci (np. **SharedPreferences**, **Room Database**).
3. Umożliwiaj edycję i usuwanie notatek.
4. Użyj EditText do edycji, przycisku „Zapisz” i RecyclerView do przeglądania listy.

---

### **5. Tworzenie aplikacji pogodowej z API**
#### **Kroki do wykonania:**
1. Zarejestruj się na [OpenWeatherMap](https://openweathermap.org/) i uzyskaj klucz API.
2. Użyj **Retrofit** lub **Volley** do komunikacji z API.
3. Na ekranie głównym umożliw użytkownikowi wprowadzenie miasta.
4. Pobierz i wyświetl dane (np. temperaturę, wilgotność, opis).

#### **Kod:**
##### Przykładowa funkcja do pobierania danych:
```java
Retrofit retrofit = new Retrofit.Builder()
        .baseUrl("https://api.openweathermap.org/")
        .addConverterFactory(GsonConverterFactory.create())
        .build();

WeatherApi weatherApi = retrofit.create(WeatherApi.class);
Call<WeatherResponse> call = weatherApi.getWeather(cityName, "API_KEY");

call.enqueue(new Callback<WeatherResponse>() {
    @Override
    public void onResponse(Call<WeatherResponse> call, Response<WeatherResponse> response) {
        if (response.isSuccessful()) {
            WeatherResponse weather = response.body();
            temperatureTextView.setText("Temp: " + weather.getMain().getTemp() + "°C");
        }
    }

    @Override
    public void onFailure(Call<WeatherResponse> call, Throwable t) {
        errorTextView.setText("Błąd: " + t.getMessage());
    }
});
```

Jeśli potrzebujesz więcej szczegółów lub kodu, daj znać! 😊


